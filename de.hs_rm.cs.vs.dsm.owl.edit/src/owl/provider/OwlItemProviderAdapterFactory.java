/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package owl.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import owl.util.OwlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OwlItemProviderAdapterFactory extends OwlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OwlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.OWLOntology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OWLOntologyItemProvider owlOntologyItemProvider;

	/**
	 * This creates an adapter for a {@link owl.OWLOntology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOWLOntologyAdapter() {
		if (owlOntologyItemProvider == null) {
			owlOntologyItemProvider = new OWLOntologyItemProvider(this);
		}

		return owlOntologyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.OWLOntologyProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OWLOntologyPropertyItemProvider owlOntologyPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link owl.OWLOntologyProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOWLOntologyPropertyAdapter() {
		if (owlOntologyPropertyItemProvider == null) {
			owlOntologyPropertyItemProvider = new OWLOntologyPropertyItemProvider(this);
		}

		return owlOntologyPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.OWLClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OWLClassItemProvider owlClassItemProvider;

	/**
	 * This creates an adapter for a {@link owl.OWLClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOWLClassAdapter() {
		if (owlClassItemProvider == null) {
			owlClassItemProvider = new OWLClassItemProvider(this);
		}

		return owlClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.OWLObjectProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OWLObjectPropertyItemProvider owlObjectPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link owl.OWLObjectProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOWLObjectPropertyAdapter() {
		if (owlObjectPropertyItemProvider == null) {
			owlObjectPropertyItemProvider = new OWLObjectPropertyItemProvider(this);
		}

		return owlObjectPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link owl.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.Individual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualItemProvider individualItemProvider;

	/**
	 * This creates an adapter for a {@link owl.Individual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualAdapter() {
		if (individualItemProvider == null) {
			individualItemProvider = new IndividualItemProvider(this);
		}

		return individualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.OWLAllDifferent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OWLAllDifferentItemProvider owlAllDifferentItemProvider;

	/**
	 * This creates an adapter for a {@link owl.OWLAllDifferent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOWLAllDifferentAdapter() {
		if (owlAllDifferentItemProvider == null) {
			owlAllDifferentItemProvider = new OWLAllDifferentItemProvider(this);
		}

		return owlAllDifferentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.OWLDataRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OWLDataRangeItemProvider owlDataRangeItemProvider;

	/**
	 * This creates an adapter for a {@link owl.OWLDataRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOWLDataRangeAdapter() {
		if (owlDataRangeItemProvider == null) {
			owlDataRangeItemProvider = new OWLDataRangeItemProvider(this);
		}

		return owlDataRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.OWLAnnotationProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OWLAnnotationPropertyItemProvider owlAnnotationPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link owl.OWLAnnotationProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOWLAnnotationPropertyAdapter() {
		if (owlAnnotationPropertyItemProvider == null) {
			owlAnnotationPropertyItemProvider = new OWLAnnotationPropertyItemProvider(this);
		}

		return owlAnnotationPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.DatatypeSlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatatypeSlotItemProvider datatypeSlotItemProvider;

	/**
	 * This creates an adapter for a {@link owl.DatatypeSlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatatypeSlotAdapter() {
		if (datatypeSlotItemProvider == null) {
			datatypeSlotItemProvider = new DatatypeSlotItemProvider(this);
		}

		return datatypeSlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.ObjectSlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectSlotItemProvider objectSlotItemProvider;

	/**
	 * This creates an adapter for a {@link owl.ObjectSlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectSlotAdapter() {
		if (objectSlotItemProvider == null) {
			objectSlotItemProvider = new ObjectSlotItemProvider(this);
		}

		return objectSlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.EnumeratedClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumeratedClassItemProvider enumeratedClassItemProvider;

	/**
	 * This creates an adapter for a {@link owl.EnumeratedClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumeratedClassAdapter() {
		if (enumeratedClassItemProvider == null) {
			enumeratedClassItemProvider = new EnumeratedClassItemProvider(this);
		}

		return enumeratedClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.IntersectionClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntersectionClassItemProvider intersectionClassItemProvider;

	/**
	 * This creates an adapter for a {@link owl.IntersectionClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntersectionClassAdapter() {
		if (intersectionClassItemProvider == null) {
			intersectionClassItemProvider = new IntersectionClassItemProvider(this);
		}

		return intersectionClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.UnionClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnionClassItemProvider unionClassItemProvider;

	/**
	 * This creates an adapter for a {@link owl.UnionClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnionClassAdapter() {
		if (unionClassItemProvider == null) {
			unionClassItemProvider = new UnionClassItemProvider(this);
		}

		return unionClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.HasValueRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HasValueRestrictionItemProvider hasValueRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link owl.HasValueRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHasValueRestrictionAdapter() {
		if (hasValueRestrictionItemProvider == null) {
			hasValueRestrictionItemProvider = new HasValueRestrictionItemProvider(this);
		}

		return hasValueRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.AllValuesFromRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AllValuesFromRestrictionItemProvider allValuesFromRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link owl.AllValuesFromRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAllValuesFromRestrictionAdapter() {
		if (allValuesFromRestrictionItemProvider == null) {
			allValuesFromRestrictionItemProvider = new AllValuesFromRestrictionItemProvider(this);
		}

		return allValuesFromRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.SomeValuesFromRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SomeValuesFromRestrictionItemProvider someValuesFromRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link owl.SomeValuesFromRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSomeValuesFromRestrictionAdapter() {
		if (someValuesFromRestrictionItemProvider == null) {
			someValuesFromRestrictionItemProvider = new SomeValuesFromRestrictionItemProvider(this);
		}

		return someValuesFromRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.CardinalityRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CardinalityRestrictionItemProvider cardinalityRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link owl.CardinalityRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCardinalityRestrictionAdapter() {
		if (cardinalityRestrictionItemProvider == null) {
			cardinalityRestrictionItemProvider = new CardinalityRestrictionItemProvider(this);
		}

		return cardinalityRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.MaxCardinalityRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxCardinalityRestrictionItemProvider maxCardinalityRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link owl.MaxCardinalityRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxCardinalityRestrictionAdapter() {
		if (maxCardinalityRestrictionItemProvider == null) {
			maxCardinalityRestrictionItemProvider = new MaxCardinalityRestrictionItemProvider(this);
		}

		return maxCardinalityRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.MinCardinalityRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinCardinalityRestrictionItemProvider minCardinalityRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link owl.MinCardinalityRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinCardinalityRestrictionAdapter() {
		if (minCardinalityRestrictionItemProvider == null) {
			minCardinalityRestrictionItemProvider = new MinCardinalityRestrictionItemProvider(this);
		}

		return minCardinalityRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.ComplementClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplementClassItemProvider complementClassItemProvider;

	/**
	 * This creates an adapter for a {@link owl.ComplementClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplementClassAdapter() {
		if (complementClassItemProvider == null) {
			complementClassItemProvider = new ComplementClassItemProvider(this);
		}

		return complementClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link owl.OWLDatatypeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OWLDatatypePropertyItemProvider owlDatatypePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link owl.OWLDatatypeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOWLDatatypePropertyAdapter() {
		if (owlDatatypePropertyItemProvider == null) {
			owlDatatypePropertyItemProvider = new OWLDatatypePropertyItemProvider(this);
		}

		return owlDatatypePropertyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (owlOntologyItemProvider != null) owlOntologyItemProvider.dispose();
		if (owlOntologyPropertyItemProvider != null) owlOntologyPropertyItemProvider.dispose();
		if (owlClassItemProvider != null) owlClassItemProvider.dispose();
		if (owlObjectPropertyItemProvider != null) owlObjectPropertyItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (individualItemProvider != null) individualItemProvider.dispose();
		if (owlAllDifferentItemProvider != null) owlAllDifferentItemProvider.dispose();
		if (owlDataRangeItemProvider != null) owlDataRangeItemProvider.dispose();
		if (owlAnnotationPropertyItemProvider != null) owlAnnotationPropertyItemProvider.dispose();
		if (datatypeSlotItemProvider != null) datatypeSlotItemProvider.dispose();
		if (objectSlotItemProvider != null) objectSlotItemProvider.dispose();
		if (enumeratedClassItemProvider != null) enumeratedClassItemProvider.dispose();
		if (intersectionClassItemProvider != null) intersectionClassItemProvider.dispose();
		if (unionClassItemProvider != null) unionClassItemProvider.dispose();
		if (hasValueRestrictionItemProvider != null) hasValueRestrictionItemProvider.dispose();
		if (allValuesFromRestrictionItemProvider != null) allValuesFromRestrictionItemProvider.dispose();
		if (someValuesFromRestrictionItemProvider != null) someValuesFromRestrictionItemProvider.dispose();
		if (cardinalityRestrictionItemProvider != null) cardinalityRestrictionItemProvider.dispose();
		if (maxCardinalityRestrictionItemProvider != null) maxCardinalityRestrictionItemProvider.dispose();
		if (minCardinalityRestrictionItemProvider != null) minCardinalityRestrictionItemProvider.dispose();
		if (complementClassItemProvider != null) complementClassItemProvider.dispose();
		if (owlDatatypePropertyItemProvider != null) owlDatatypePropertyItemProvider.dispose();
	}

}
