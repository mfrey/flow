/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package rdfs.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import rdfs.util.RdfsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RdfsItemProviderAdapterFactory extends RdfsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RdfsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFSResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFSResourceItemProvider rdfsResourceItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFSResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFSResourceAdapter() {
		if (rdfsResourceItemProvider == null) {
			rdfsResourceItemProvider = new RDFSResourceItemProvider(this);
		}

		return rdfsResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFSClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFSClassItemProvider rdfsClassItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFSClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFSClassAdapter() {
		if (rdfsClassItemProvider == null) {
			rdfsClassItemProvider = new RDFSClassItemProvider(this);
		}

		return rdfsClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFSLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFSLiteralItemProvider rdfsLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFSLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFSLiteralAdapter() {
		if (rdfsLiteralItemProvider == null) {
			rdfsLiteralItemProvider = new RDFSLiteralItemProvider(this);
		}

		return rdfsLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFSDatatype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFSDatatypeItemProvider rdfsDatatypeItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFSDatatype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFSDatatypeAdapter() {
		if (rdfsDatatypeItemProvider == null) {
			rdfsDatatypeItemProvider = new RDFSDatatypeItemProvider(this);
		}

		return rdfsDatatypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFXMLLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFXMLLiteralItemProvider rdfxmlLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFXMLLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFXMLLiteralAdapter() {
		if (rdfxmlLiteralItemProvider == null) {
			rdfxmlLiteralItemProvider = new RDFXMLLiteralItemProvider(this);
		}

		return rdfxmlLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFPropertyItemProvider rdfPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFPropertyAdapter() {
		if (rdfPropertyItemProvider == null) {
			rdfPropertyItemProvider = new RDFPropertyItemProvider(this);
		}

		return rdfPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFListItemProvider rdfListItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFListAdapter() {
		if (rdfListItemProvider == null) {
			rdfListItemProvider = new RDFListItemProvider(this);
		}

		return rdfListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFSContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFSContainerItemProvider rdfsContainerItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFSContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFSContainerAdapter() {
		if (rdfsContainerItemProvider == null) {
			rdfsContainerItemProvider = new RDFSContainerItemProvider(this);
		}

		return rdfsContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFAlt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFAltItemProvider rdfAltItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFAlt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFAltAdapter() {
		if (rdfAltItemProvider == null) {
			rdfAltItemProvider = new RDFAltItemProvider(this);
		}

		return rdfAltItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFBag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFBagItemProvider rdfBagItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFBag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFBagAdapter() {
		if (rdfBagItemProvider == null) {
			rdfBagItemProvider = new RDFBagItemProvider(this);
		}

		return rdfBagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFSeq} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFSeqItemProvider rdfSeqItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFSeq}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFSeqAdapter() {
		if (rdfSeqItemProvider == null) {
			rdfSeqItemProvider = new RDFSeqItemProvider(this);
		}

		return rdfSeqItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFSContainerMembershipProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFSContainerMembershipPropertyItemProvider rdfsContainerMembershipPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFSContainerMembershipProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFSContainerMembershipPropertyAdapter() {
		if (rdfsContainerMembershipPropertyItemProvider == null) {
			rdfsContainerMembershipPropertyItemProvider = new RDFSContainerMembershipPropertyItemProvider(this);
		}

		return rdfsContainerMembershipPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.RDFStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RDFStatementItemProvider rdfStatementItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.RDFStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRDFStatementAdapter() {
		if (rdfStatementItemProvider == null) {
			rdfStatementItemProvider = new RDFStatementItemProvider(this);
		}

		return rdfStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.Ontology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologyItemProvider ontologyItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.Ontology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologyAdapter() {
		if (ontologyItemProvider == null) {
			ontologyItemProvider = new OntologyItemProvider(this);
		}

		return ontologyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.PlainLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainLiteralItemProvider plainLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.PlainLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainLiteralAdapter() {
		if (plainLiteralItemProvider == null) {
			plainLiteralItemProvider = new PlainLiteralItemProvider(this);
		}

		return plainLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.TypedLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedLiteralItemProvider typedLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.TypedLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedLiteralAdapter() {
		if (typedLiteralItemProvider == null) {
			typedLiteralItemProvider = new TypedLiteralItemProvider(this);
		}

		return typedLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rdfs.Namespace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamespaceItemProvider namespaceItemProvider;

	/**
	 * This creates an adapter for a {@link rdfs.Namespace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamespaceAdapter() {
		if (namespaceItemProvider == null) {
			namespaceItemProvider = new NamespaceItemProvider(this);
		}

		return namespaceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (rdfsResourceItemProvider != null) rdfsResourceItemProvider.dispose();
		if (rdfsClassItemProvider != null) rdfsClassItemProvider.dispose();
		if (rdfsLiteralItemProvider != null) rdfsLiteralItemProvider.dispose();
		if (rdfsDatatypeItemProvider != null) rdfsDatatypeItemProvider.dispose();
		if (rdfxmlLiteralItemProvider != null) rdfxmlLiteralItemProvider.dispose();
		if (rdfPropertyItemProvider != null) rdfPropertyItemProvider.dispose();
		if (rdfListItemProvider != null) rdfListItemProvider.dispose();
		if (rdfsContainerItemProvider != null) rdfsContainerItemProvider.dispose();
		if (rdfAltItemProvider != null) rdfAltItemProvider.dispose();
		if (rdfBagItemProvider != null) rdfBagItemProvider.dispose();
		if (rdfSeqItemProvider != null) rdfSeqItemProvider.dispose();
		if (rdfsContainerMembershipPropertyItemProvider != null) rdfsContainerMembershipPropertyItemProvider.dispose();
		if (rdfStatementItemProvider != null) rdfStatementItemProvider.dispose();
		if (ontologyItemProvider != null) ontologyItemProvider.dispose();
		if (plainLiteralItemProvider != null) plainLiteralItemProvider.dispose();
		if (typedLiteralItemProvider != null) typedLiteralItemProvider.dispose();
		if (namespaceItemProvider != null) namespaceItemProvider.dispose();
	}

}
