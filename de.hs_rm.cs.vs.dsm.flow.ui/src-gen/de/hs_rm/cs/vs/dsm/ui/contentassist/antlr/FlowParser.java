/*
* generated by Xtext
*/
package de.hs_rm.cs.vs.dsm.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.hs_rm.cs.vs.dsm.services.FlowGrammarAccess;

public class FlowParser extends AbstractContentAssistParser {
	
	@Inject
	private FlowGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.hs_rm.cs.vs.dsm.ui.contentassist.antlr.internal.InternalFlowParser createParser() {
		de.hs_rm.cs.vs.dsm.ui.contentassist.antlr.internal.InternalFlowParser result = new de.hs_rm.cs.vs.dsm.ui.contentassist.antlr.internal.InternalFlowParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelElementAccess().getAlternatives(), "rule__ModelElement__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getElementJoinOperatorAccess().getAlternatives_2(), "rule__ElementJoinOperator__Alternatives_2");
					put(grammarAccess.getTagElementAccess().getAlternatives(), "rule__TagElement__Alternatives");
					put(grammarAccess.getWindowOperatorAccess().getAlternatives(), "rule__WindowOperator__Alternatives");
					put(grammarAccess.getWindowOperatorAccess().getUnitAlternatives_0_2_0(), "rule__WindowOperator__UnitAlternatives_0_2_0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getStreamDeclarationAccess().getGroup(), "rule__StreamDeclaration__Group__0");
					put(grammarAccess.getStreamElementAccess().getGroup(), "rule__StreamElement__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getTestElementAccess().getGroup(), "rule__TestElement__Group__0");
					put(grammarAccess.getTestAssignAccess().getGroup(), "rule__TestAssign__Group__0");
					put(grammarAccess.getOWLTestElementAccess().getGroup(), "rule__OWLTestElement__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getStreamDefinitionAccess().getGroup(), "rule__StreamDefinition__Group__0");
					put(grammarAccess.getStreamAccessAccess().getGroup(), "rule__StreamAccess__Group__0");
					put(grammarAccess.getStreamOperatorParameterAccess().getGroup(), "rule__StreamOperatorParameter__Group__0");
					put(grammarAccess.getStreamOperatorParameterAccess().getGroup_1(), "rule__StreamOperatorParameter__Group_1__0");
					put(grammarAccess.getCountOperatorAccess().getGroup(), "rule__CountOperator__Group__0");
					put(grammarAccess.getStandardDeviationOperatorAccess().getGroup(), "rule__StandardDeviationOperator__Group__0");
					put(grammarAccess.getAverageOperatorAccess().getGroup(), "rule__AverageOperator__Group__0");
					put(grammarAccess.getElementJoinOperatorAccess().getGroup(), "rule__ElementJoinOperator__Group__0");
					put(grammarAccess.getElementJoinOperatorAccess().getGroup_3(), "rule__ElementJoinOperator__Group_3__0");
					put(grammarAccess.getElementJoinOperatorAccess().getGroup_4(), "rule__ElementJoinOperator__Group_4__0");
					put(grammarAccess.getTagOperatorAccess().getGroup(), "rule__TagOperator__Group__0");
					put(grammarAccess.getTagOperatorAccess().getGroup_3(), "rule__TagOperator__Group_3__0");
					put(grammarAccess.getTagClassElementAccess().getGroup(), "rule__TagClassElement__Group__0");
					put(grammarAccess.getTagObjectPropertyElementAccess().getGroup(), "rule__TagObjectPropertyElement__Group__0");
					put(grammarAccess.getTagDataTypePropertyElementAccess().getGroup(), "rule__TagDataTypePropertyElement__Group__0");
					put(grammarAccess.getOutputOperatorAccess().getGroup(), "rule__OutputOperator__Group__0");
					put(grammarAccess.getOutputOperatorParameterAccess().getGroup(), "rule__OutputOperatorParameter__Group__0");
					put(grammarAccess.getOutputOperatorParameterAccess().getGroup_1(), "rule__OutputOperatorParameter__Group_1__0");
					put(grammarAccess.getWindowOperatorAccess().getGroup_0(), "rule__WindowOperator__Group_0__0");
					put(grammarAccess.getModelAccess().getModelAssignment(), "rule__Model__ModelAssignment");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_3(), "rule__PackageDeclaration__ElementsAssignment_3");
					put(grammarAccess.getStreamDeclarationAccess().getNameAssignment_1(), "rule__StreamDeclaration__NameAssignment_1");
					put(grammarAccess.getStreamDeclarationAccess().getElementsAssignment_3(), "rule__StreamDeclaration__ElementsAssignment_3");
					put(grammarAccess.getStreamElementAccess().getTypeAssignment_0(), "rule__StreamElement__TypeAssignment_0");
					put(grammarAccess.getStreamElementAccess().getNameAssignment_1(), "rule__StreamElement__NameAssignment_1");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getTestElementAccess().getNameAssignment_1(), "rule__TestElement__NameAssignment_1");
					put(grammarAccess.getTestAssignAccess().getLeftAssignment_1(), "rule__TestAssign__LeftAssignment_1");
					put(grammarAccess.getTestAssignAccess().getRightAssignment_3(), "rule__TestAssign__RightAssignment_3");
					put(grammarAccess.getOWLTestElementAccess().getElementAssignment_1(), "rule__OWLTestElement__ElementAssignment_1");
					put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0(), "rule__VariableDeclaration__TypeAssignment_0");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
					put(grammarAccess.getStreamDefinitionAccess().getReferenceAssignment_0(), "rule__StreamDefinition__ReferenceAssignment_0");
					put(grammarAccess.getStreamDefinitionAccess().getNameAssignment_1(), "rule__StreamDefinition__NameAssignment_1");
					put(grammarAccess.getStreamAccessAccess().getReferenceAssignment_0(), "rule__StreamAccess__ReferenceAssignment_0");
					put(grammarAccess.getStreamAccessAccess().getElementAssignment_2(), "rule__StreamAccess__ElementAssignment_2");
					put(grammarAccess.getStreamOperatorParameterAccess().getStreamAssignment_0(), "rule__StreamOperatorParameter__StreamAssignment_0");
					put(grammarAccess.getStreamOperatorParameterAccess().getBarrierAssignment_1_1(), "rule__StreamOperatorParameter__BarrierAssignment_1_1");
					put(grammarAccess.getCountOperatorAccess().getParameterAssignment_2(), "rule__CountOperator__ParameterAssignment_2");
					put(grammarAccess.getCountOperatorAccess().getStreamAssignment_4(), "rule__CountOperator__StreamAssignment_4");
					put(grammarAccess.getStandardDeviationOperatorAccess().getParameterAssignment_2(), "rule__StandardDeviationOperator__ParameterAssignment_2");
					put(grammarAccess.getStandardDeviationOperatorAccess().getStreamAssignment_4(), "rule__StandardDeviationOperator__StreamAssignment_4");
					put(grammarAccess.getAverageOperatorAccess().getParameterAssignment_2(), "rule__AverageOperator__ParameterAssignment_2");
					put(grammarAccess.getAverageOperatorAccess().getStreamAssignment_4(), "rule__AverageOperator__StreamAssignment_4");
					put(grammarAccess.getElementJoinOperatorAccess().getElementParametersAssignment_2_0(), "rule__ElementJoinOperator__ElementParametersAssignment_2_0");
					put(grammarAccess.getElementJoinOperatorAccess().getVariableElementParametersAssignment_2_1(), "rule__ElementJoinOperator__VariableElementParametersAssignment_2_1");
					put(grammarAccess.getElementJoinOperatorAccess().getElementParametersAssignment_3_1(), "rule__ElementJoinOperator__ElementParametersAssignment_3_1");
					put(grammarAccess.getElementJoinOperatorAccess().getVariableElementParametersAssignment_4_1(), "rule__ElementJoinOperator__VariableElementParametersAssignment_4_1");
					put(grammarAccess.getElementJoinOperatorAccess().getParameterAssignment_6(), "rule__ElementJoinOperator__ParameterAssignment_6");
					put(grammarAccess.getTagOperatorAccess().getParametersAssignment_2(), "rule__TagOperator__ParametersAssignment_2");
					put(grammarAccess.getTagOperatorAccess().getParametersAssignment_3_1(), "rule__TagOperator__ParametersAssignment_3_1");
					put(grammarAccess.getTagOperatorAccess().getStreamAssignment_5(), "rule__TagOperator__StreamAssignment_5");
					put(grammarAccess.getTagClassElementAccess().getReferenceAssignment_0(), "rule__TagClassElement__ReferenceAssignment_0");
					put(grammarAccess.getTagClassElementAccess().getElementAssignment_3(), "rule__TagClassElement__ElementAssignment_3");
					put(grammarAccess.getTagObjectPropertyElementAccess().getReferenceAssignment_0(), "rule__TagObjectPropertyElement__ReferenceAssignment_0");
					put(grammarAccess.getTagObjectPropertyElementAccess().getElementAssignment_3(), "rule__TagObjectPropertyElement__ElementAssignment_3");
					put(grammarAccess.getTagDataTypePropertyElementAccess().getReferenceAssignment_0(), "rule__TagDataTypePropertyElement__ReferenceAssignment_0");
					put(grammarAccess.getTagDataTypePropertyElementAccess().getElementAssignment_3(), "rule__TagDataTypePropertyElement__ElementAssignment_3");
					put(grammarAccess.getOutputOperatorAccess().getParameterAssignment_2(), "rule__OutputOperator__ParameterAssignment_2");
					put(grammarAccess.getOutputOperatorAccess().getLocationAssignment_4(), "rule__OutputOperator__LocationAssignment_4");
					put(grammarAccess.getOutputOperatorAccess().getStreamAssignment_6(), "rule__OutputOperator__StreamAssignment_6");
					put(grammarAccess.getOutputOperatorParameterAccess().getElementAssignment_0(), "rule__OutputOperatorParameter__ElementAssignment_0");
					put(grammarAccess.getOutputOperatorParameterAccess().getElementAssignment_1_1(), "rule__OutputOperatorParameter__ElementAssignment_1_1");
					put(grammarAccess.getWindowOperatorAccess().getSettingAssignment_0_0(), "rule__WindowOperator__SettingAssignment_0_0");
					put(grammarAccess.getWindowOperatorAccess().getValueAssignment_0_1(), "rule__WindowOperator__ValueAssignment_0_1");
					put(grammarAccess.getWindowOperatorAccess().getUnitAssignment_0_2(), "rule__WindowOperator__UnitAssignment_0_2");
					put(grammarAccess.getWindowOperatorAccess().getSettingAssignment_1(), "rule__WindowOperator__SettingAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.hs_rm.cs.vs.dsm.ui.contentassist.antlr.internal.InternalFlowParser typedParser = (de.hs_rm.cs.vs.dsm.ui.contentassist.antlr.internal.InternalFlowParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FlowGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FlowGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
