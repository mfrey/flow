grammar de.hs_rm.cs.vs.dsm.Flow with org.eclipse.xtext.common.Terminals
   
/** Import of the ecore model */
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
/** Import of the base ocl ecore model */
//import "platform:/resource/de.hs_rm.cs.vs.dsm.flow/model/BaseCST.ecore" as base
/** Import of the ocl ecore model */
//import "platform:/resource/org.eclipse.ocl.examples.xtext.base/model/EssentialOCLCST.ecore" as essential

/** Referring to Java types */
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
/** Import of an owl ecore model */
import "platform:/resource/de.hs_rm.cs.vs.dsm.flow/model/owl.ecore" as OWL
/** Generate the grammar for the language flow */
generate flow "http://www.hs_rm.de/cs/vs/dsm/Flow"

Model:
	model+=(PackageDeclaration)+; 

/**
 * A package consists of multiple model elements of the language
 */
PackageDeclaration:
	'package' name=ID '{'
		(elements+=ModelElement)*
	'}'';';

ModelElement:
	PackageDeclaration | Import | TestElement | TestAssign | StreamDeclaration | Operator |
	StreamDefinition; 
	
	
StreamDeclaration:
	'stream' name=ID '{'
		elements+=(StreamElement)+
	'}'';'
;

StreamElement:
	type=[jvmTypes::JvmType] name=ID';';
	
/**
 * The Import rule defines a import statement for referring to other *.flw files as well as 
 * files of knowledge representations such as *.owl or UML constraints suchs as *.ocl
 */
Import:
	'import' importURI=STRING ';';
	
TestElement:
	'var' name=ID;

TestAssign:
	'let' left=[TestElement] '=' right=[TestElement];	
	
OWLTestElement:
	'owl' element=[OWL::OWLClass];

// TODO: Operatoren nach Operatoren mit Rueckgabetyp und ohne Rueckgabetyp auftrennen
Operator: 
	ElementJoinOperator | SymmetricDifferenceOperator | DifferenceOperator | SplitOperator |
	TagOperator | 
	CountOperator | StandardDeviationOperator | AverageOperator |
	OutputOperator;


Variable:
	VariableDeclaration;
	
VariableDeclaration:
	type=[jvmTypes::JvmType] name=ID;

StreamDefinition:
	reference=[StreamDeclaration] name=ID';';
/**
 * Elements of a stream are accessed by a a stream definition followed by a dot 
 */
StreamAccess:
	reference=[StreamDefinition]'.'element=[VariableDeclaration];
	
StreamOperatorParameter:
	stream=[StreamDefinition] ('['barrier=BarrierOperator']')?;

/**
 * The CountOperator rule defines a count operator which counts an element
 * of a stream.
 */
CountOperator:
	'count''('parameter=StreamAccess ',' stream=StreamOperatorParameter ')';	

/**
 * The StandardDeviationOperator rule defines a operator which calculates the standard
 * deviation of an element.
 */		
StandardDeviationOperator:
	'std''('parameter=StreamAccess ',' stream=StreamOperatorParameter ')';	

/**
 * The AverageOperator rule defines a operator which calculates the average
 * of an element.
 */			
AverageOperator:
	'avg''('parameter=StreamAccess ',' stream=StreamOperatorParameter ')';	

/**
 * The ElementJoinOperator rule defines a join operation on a stream and another stream element
 * and/or variable.
 */
ElementJoinOperator:
	'ejoin''('(elementParameters+=StreamAccess | variableElementParameters+=[Variable]) 
	  (',' elementParameters+=StreamAccess)* (',' variableElementParameters+=[Variable])*
	  ',' parameter=StreamOperatorParameter ')';
	
/**
 * The TagOperator rule tags elements of a stream with elements of an ontology
 */
TagOperator:
	'tag''('parameters+=TagElement (',' parameters+=TagElement)* 
	',' stream=StreamOperatorParameter')';
	
/**
 * The overall tag element rule for certain elements of owl ontology. Since a owl class, object property
 * and datatype property don't share a common 'supertype' it's not possible to use one rule. In addition
 * you have to use extra keywords. For example class, objectproperty, datatype ...
 */
TagElement:
	TagClassElement | TagObjectPropertyElement | TagDataTypePropertyElement;

/**
 * The tag element for a owl class
 */
TagClassElement:
	reference=StreamAccess 'is' 'class' element=[OWL::OWLClass|STRING]; 

/**
 * The tag element for a owl object property
 */
TagObjectPropertyElement:
	reference=StreamAccess 'is' 'objectproperty' element=[OWL::OWLObjectProperty|STRING]; 

/**
 * The tag element for a datatype property
 */
TagDataTypePropertyElement:
	reference=StreamAccess 'is' 'datatype' element=[OWL::OWLDatatypeProperty|STRING];
	
/**
 * The OutputOperator rule defines a operator which prints the content of the
 * a stream specified in parameter to a location specified in location.
 */	
OutputOperator:
	'out''('parameter=OutputOperatorParameter ',' location=STRING ',' stream=StreamOperatorParameter ')' ';';
/**
 * Parameter for the OutputOperator which are stream elements
 */
OutputOperatorParameter:
	element+=StreamAccess (',' element+=StreamAccess)*;
	
/**
 * The BarrierOperator is a rule which summarizes the barrier operators of the
 * language. At present the language supports only two barrier operators.
 */
BarrierOperator:
	WindowOperator;

/**
 * The WindowOperator rule defines a window operator which is part of several operators. It
 * defines sliding window over a stream. 
 */	
WindowOperator:
	(setting='last' value=NUMBER (unit=('min' | 'hrs' | 'sec' | 'elements'))? | setting='now');

/**
 * The SymmetricDifferenceOperator rule determines the symmetric difference (of a set) of 
 * multiple streams.
 */
SymmetricDifferenceOperator:
	'sdif''('parameters+=StreamOperatorParameter ',' 
		parameters+=StreamOperatorParameter (',' parameters+=StreamOperatorParameter)*')';
		
/**
 * The DifferenceOperator rule determines the difference (of a set) of multiple streams.
 */
DifferenceOperator:
	'diff''('parameters+=StreamOperatorParameter ',' 
		parameters+=StreamOperatorParameter (',' parameters+=StreamOperatorParameter)*')';	

/**
 * The SplitOperator rule duplicates a stream
 */
SplitOperator:
	'split''('parameter=StreamOperatorParameter')';

/** Definition of numbers (float as well as integer) */
terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?;

/** Fixes a antlr issue */
terminal INT returns ecore::EInt:
	'this one has been deactivated';