grammar de.hs_rm.cs.vs.dsm.Flow

/** Define hidden terminal symbols */
hidden(WS, ML_COMMENT, SL_COMMENT)
/** Import of the ecore model */
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
/** Import of an owl ecore model */
import "platform:/resource/de.hs_rm.cs.vs.dsm.flow/model/owl.ecore" as OWL
/** Generate the grammar for the language flow */
generate flow "http://www.hs_rm.de/cs/vs/dsm/Flow"

/**
 * The model of the language consists of multiple packages
 */
Model:
	(models+=PackageDeclaration)+; 

/**
 * A package consists of multiple model elements of the language
 */
PackageDeclaration:
	'package' name=ID '{'
		(elements+=ModelElement)*
	'}';

ModelElement:
	PackageDeclaration | Import | StructureDeclaration | DecisionTreeOperator |
	StreamDeclaration | VariableDefinition | StreamStatement | StreamDefinition | StreamAccess  | 
	NoReturnTypeOperator;
	
/**
 * The Import rule defines a import statement for referring to other *.flow files as well as 
 * files of knowledge representations such as *.owl and *.ocl
 */
Import:
	'import' importURI=STRING;

/**
 * Every stream expression has at least one return type and one operation. Multiple
 * return types are seperated by a comma. 
 */
StreamStatement:
	returnStream+=[StreamDefinition] (',' returnStream+=[StreamDefinition])*  
	'=' operator=ReturnTypeOperator ';'; 


/**
 * A variable statement refers to an existing variable and 'assigns' the variable an 
 * expression.
 */
StreamVariableStatement:
	reference=[StreamDefinition] '=' expression=Expression ';';

/**
 * Elements of a stream are accessed by a a stream definition followed by a dot 
 */
StreamAccess:
	reference=[StreamDefinition]'.'element=[VariableDeclaration];

/**
 * Elements of a stream declaration are accessed by a a stream declaration followed by 
 * a colon. 
 */
StreamDeclarationAccess:
	reference=[StreamDeclaration]':'element=[VariableDeclaration];

/**
 * A stream definition creates a stream with a reference to a declared stream.
 * This could be list of multiple streams seperated by a comma.
 */
StreamDefinition:
	reference=[StreamDeclaration] name=ID';';

/**
 * The JoinOperator rule defines a join operation on two streams.
 */	
JoinOperator:
	'join' '('parameters+=StreamOperatorParameter ',' 
	  parameters+=StreamOperatorParameter
	   (',' parameters+=StreamOperatorParameter)* ')';

StreamOperatorParameter:
	stream=[StreamDefinition] ('['barrier=BarrierOperator']')?;

/**
 * The ElementJoinOperator rule defines a join operation on a stream and another stream element
 * and/or variable.
 */
ElementJoinOperator:
	'ejoin''('(elementParameters+=StreamAccess | variableElementParameters+=[VariableDefinition]) 
	  (',' elementParameters+=StreamAccess)* (',' variableElementParameters+=[VariableDefinition])*
	  ',' parameter=StreamOperatorParameter ')';

/**
 * The FilterOperator rule defines a filter operation on a stream. The expression of the operator 
 * is a conditional expression which defines if a element of a stream is forwarded in a fgoing
 * stream or not.
 */
FilterOperator:
	'filter' '(' expression+=Expression (',' expression+=Expression)* ',' stream=StreamOperatorParameter')';

/**
 * The SplitOperator rule duplicates a stream
 */
SplitOperator:
	'split''('parameter=StreamOperatorParameter')';

LogOperator:
	'log' '('location=STRING ',' format=STRING ',' stream=StreamOperatorParameter ')';

RandomOperator:
	'rand' '('maximum=NUMBER ',' sleep=NUMBER ',' stream=StreamOperatorParameter ')';

DecisionTreeOperator:
	'dtree' '('attributes+=DecisionTreeAttribute ',' (attributes+=DecisionTreeAttribute ',')* delta=NUMBER ',' tau=NUMBER ',' barrier= NUMBER ',' frequency= NUMBER 
		classAttributes+=DecisionTreeAttribute (',' classAttributes+=DecisionTreeAttribute)* ',' stream=StreamOperatorParameter ')';
	
DecisionTreeAttribute:
	key = STRING '{' value+=STRING (',' value+=STRING)* '}';
	

/**
 * The MatchOperator rule joins two streams depending on a expression and does a calculation
 * based on a second expression.
 */
MatchOperator:
	'match''('expression=Expression ',' calculation=Expression ',' stream+=StreamOperatorParameter (','stream+=StreamOperatorParameter)* ')';


InputOperator:
	'in' '('iri+=STRING (',' iri+=STRING)* ',' address=STRING ',' port=NUMBER ')';

/**
 * The rule summarizes the operators which have a return type
 */
ReturnTypeOperator:
	InputOperator | JoinOperator |  LogOperator | 
	TagOperator | UnTagOperator | FilterOperator | SplitOperator | CountOperator | 
	StandardDeviationOperator | AverageOperator | ElementJoinOperator | MatchOperator | ModuloOperator |
	RandomOperator | SWRLOperator | AdditionOperator | SubtractionOperator | MultiplicationOperator | 
	DivisionOperator;

/**
 * The rule summarizes the operators which have no return type
 */
NoReturnTypeOperator:
	OutputOperator;

/**
 * The TagOperator rule tags elements of a stream with elements of an ontology
 */
TagOperator:
	'tag''('parameters+=TagElement (',' parameters+=TagElement)*')';

NewTagOperator:
	'tag''(' 
		query=QueryTagOperator ', '
		target=STRING
	')'
;

/**
 * Basically a query (QueryTagOperator) within the tag Operator (TagOperator) is a 
 * SPARQL query. SPARQL supports four different types of queries which are repres-
 * ented by the attribute 'queryType' of enumeration type SparqlQueryType. 
 */
QueryTagOperator:
	'{'
		queryType = SparqlQueryType
		query = SparqlQuery
	'}'
;

/**
 * 
 */
SparqlQuery:
	variable=SparqlQueryVariable 'WHERE' '{' 
		
	'}'
;

/**
 * 
 */
SparqlQueryVariable:
	'?' variable+=STRING ('?' variable+=STRING)*
;

enum SparqlQueryType:
	SELECT = 'SELECT' | CONSTRUCT = 'CONSTRUCT' | ASK = 'ASK' | DESCRIBE = 'DESCRIBE' 
;

/**
 * The rule summarizes the operators which have no return type
 */
UnTagOperator:
	'untag''('parameters+=UnTagElement(',' parameters+=UnTagElement)* 
	',' stream=StreamOperatorParameter')';

UnTagElement:
	element=[OWL::OWLClass|STRING] 'is' reference=StreamAccess; 

/**
 * The overall tag element rule for certain elements of owl ontology. Since a owl class, object property
 * and datatype property don't share a common 'supertype' it's not possible to use one rule. In addition
 * you have to use extra keywords. For example class, objectproperty, datatype ...
 */
TagElement:
	TagClassElement | TagObjectPropertyElement | TagDataTypePropertyElement;

/**
 * The tag element for a owl class
 */
TagClassElement:
	reference=StreamAccess 'is' 'class' element=[OWL::OWLClass|STRING]; 

/**
 * The tag element for a owl object property
 */
TagObjectPropertyElement:
	reference=StreamAccess 'is' 'objectproperty' element=[OWL::OWLObjectProperty|STRING]; 

/**
 * The tag element for a datatype property
 */
TagDataTypePropertyElement:
	reference=StreamAccess 'is' 'datatype' element=[OWL::OWLDatatypeProperty|STRING]; 

/**
 * The BarrierOperator is a rule which summarizes the barrier operators of the
 * language. At present the language supports only two barrier operators.
 */
BarrierOperator:
	WindowOperator | MarkerOperator;

/**
 * The WindowOperator rule defines a window operator which is part of several operators. It
 * defines sliding window over a stream. 
 */	
WindowOperator:
	(setting='last' value=NUMBER (unit=('min' | 'hrs' | 'sec' | 'elements'))? | setting='now');

/**
 * The MarkerOperator rule defines a marker operator which is part of several operators. It
 * defines a marker element in a stream. A marker element is a element which approves on a 
 * certain criteria (expression).
 */	
MarkerOperator:
	'marker' expression=Expression;

/**
 * The SWRL rule defines a swrl operator which applies a swrl rule to elements
 * of a stream.
 */
SWRLOperator:
	'swrl''('rule=SWRLRule ',' barrier+=StreamOperatorParameter (',' barrier+=StreamOperatorParameter)*')';

SWRLRule:
	'Implies' '(' antecedent=AntecedentRule ',' consequent=ConsequentRule ')';

AntecedentRule:
	'Antecedent' '(' atoms+=Rule (',' atoms+=Rule)* ')';

ConsequentRule:
	'Consequent' '(' atoms+=Rule (',' atoms+=Rule)* ')';

Rule:
	name=[OWL::OWLObjectProperty|STRING] '(' '?' variable+=StreamAccess (','  '?' variable+=StreamAccess )* ')';


/**
 * The CountOperator rule defines a count operator which counts an element
 * of a stream.
 */
CountOperator:
	'count''('parameter=StreamAccess ',' stream=StreamOperatorParameter ')';	

/**
 * The StandardDeviationOperator rule defines a operator which calculates the standard
 * deviation of an element.
 */		
StandardDeviationOperator:
	'std''('parameter=StreamAccess ',' stream=StreamOperatorParameter ')';	

/**
 * The AverageOperator rule defines a operator which calculates the average
 * of an element.
 */			
AverageOperator:
	'avg''('parameter=StreamAccess ',' stream=StreamOperatorParameter ')';	

/**
 * The AdditionOperator rule defines a operator for addition of elements
 */			
AdditionOperator:
	'add''('parameter=StreamAccess ',' (literal=NUMBER | streamElement=StreamAccess | variable=[VariableDefinition])')';	

/**
 * The SubtractionOperator rule defines a operator for subtraction of elements
 */			
SubtractionOperator:
	'sub''('parameter=StreamAccess ',' (literal=NUMBER | streamElement=StreamAccess | variable=[VariableDefinition])')';	

/**
 * The MultiplicationOperator rule defines a operator for multiplication of elements
 */			
MultiplicationOperator:
	'mult''('parameter=StreamAccess ',' (literal=NUMBER | streamElement=StreamAccess | variable=[VariableDefinition])')';	

/**
 * The DivisionOperator rule defines a operator for division of elements
 */			
DivisionOperator:
	'div''('parameter=StreamAccess ',' (literal=NUMBER | streamElement=StreamAccess | variable=[VariableDefinition])')';	

/**
 * The ModuloOperator rule defines a operator for modulo operation on elements
 */			
ModuloOperator:
	'mod''('parameter=StreamAccess ',' (literal=NUMBER | streamElement=StreamAccess | variable=[VariableDefinition])')';	


/**
 * The OutputOperator rule defines a operator which prints the content of the
 * a stream specified in parameter to a location specified in location.
 */	
OutputOperator:
	'out''(' stream=StreamOperatorParameter ',' iri+=STRING (',' iri+=STRING)* ',' address=STRING ',' port=NUMBER ')' ';';

VariableDefinition:
	NumberVariableDefinition | StringVariableDefinition | BooleanVariableDefinition;

VariableDeclaration:
	type=DataType name=ID';';
	
NumberVariableDefinition:
	type=SimpleDataType name=ID '=' value=NUMBER';';

StringVariableDefinition:
	type=StringDataType name=ID '=' value=STRING ';';	

BooleanVariableDefinition:
	type=BooleanDataType name=ID '=' value=BOOLVALUE ';';	

/** The declaration of the 'structure' element. */
StructureDeclaration:
	/** A structure has a name and consists of at least one element */
	'structure' name=ID '{'(elements+=VariableDeclaration)+'}';

/** The declaration of the 'stream' element. */
StreamDeclaration:
	/** Every stream begins with the stream keyword and has a name */
	'stream' name=ID '{'
	    /** Also, every stream consists of a number of elements, at least of one element*/
		elements+=(StreamElement)+
	'}';

/** A stream element is a structure element or a variable */
StreamElement:
	StructureElements | VariableDeclaration;

/** A structure element references to an existing structure */
StructureElements:
	'use' element=[StructureDeclaration] ';';

Expression returns Expression:
	Or;

Or returns Expression:
	And ({BooleanOperation.left=current} operator="||" right=And)*;

And returns Expression:
	RelationalExpression ({BooleanOperation.left=current} operator="&&" 
	right=RelationalExpression)*;

RelationalExpression returns Expression:
	Addition ({BooleanOperation.left=current} 
	operator=("==" | "!=" | ">=" | "<=" | ">" | "<") right=Addition)*;

Addition returns Expression:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;

Multiplication returns Expression:
	PrimaryExpression (({Multi.left=current} '*' | {Div.left=current} '/') 
	right=PrimaryExpression)*;

PrimaryExpression returns Expression:
	'(' Expression ')' |
	{NumberLiteral} value=NUMBER | {VariableCall} variable=[VariableDefinition] | 
	{StreamAccess} streamVariable=StreamAccess;	

/** Definition of numbers (float as well as integer) */
terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?;

/** Definition of boolean values */
terminal BOOLVALUE returns ecore::EBoolean:
	'true' | 'false';

/** Fixes a antlr issue */
terminal INT returns ecore::EInt:
	'this one has been deactivated';

/** Definition of the available datatypes */
 DataType returns DataType:
	SimpleDataType | ComplexDataType;

/** Definition of the simple datatype */
 SimpleDataType returns SimpleDataType:
	IntegerDataType | FloatDataType | BooleanDataType;

/** Definition of the complex datatype */
 ComplexDataType returns ComplexDataType:
	StringDataType;

/** Definition of the integer datatype */
IntegerDataType:
	'int' {IntegerDataType};

/** Definition of the bool datatype */
 BooleanDataType:
	'bool' {BooleanDataType};
	
/** Definition of the float datatype */
 FloatDataType:
	'float' {FloatDataType};

/** Definition of the string datatype */
StringDataType:
	'string' {StringDataType};	

/**
 * The following rules reuse rule statements of the standard xtext grammar since it is
 * only possible to add one additional grammar to a grammar while using the 'with'
 * statement.
 */
	
/** A definition of a identifier from the Xtext standard grammar */
terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
/** A definition of a string from the Xtext standard grammar */
terminal STRING: 
  '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
  "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"; 
/** A multiline comment terminal from the Xtext standard grammar */
terminal ML_COMMENT: '/*' -> '*/';
/** A single line terminal from the Xtext standard grammar */
terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
/** A whitespace terminal from the Xtext standard grammar */
terminal WS: (' '|'\t'|'\r'|'\n')+;