/*
 * generated by Xtext
 */
package de.hs_rm.cs.vs.dsm.scoping;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import de.hs_rm.cs.vs.dsm.flow.StreamAccess;
import de.hs_rm.cs.vs.dsm.flow.StreamElement;
import de.hs_rm.cs.vs.dsm.flow.StructureElements;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 * 
 */
public class FlowScopeProvider extends AbstractDeclarativeScopeProvider {
	/**
	 * The method offers a scoping mechanism for StreamAccess elements.
	 * 
	 * @param pStreamAccess - The element which scope should be resolved
	 * @param pReference - A representation of the model object 
	 * 
	 * @return A hierarchical container
	 */
	public IScope scope_StreamAccess_element(StreamAccess pStreamAccess, EReference pReference){
		// The original element list
		EList<StreamElement> elementList = pStreamAccess.getReference().getReference().getElements();
		// The result list
		EList<StreamElement> resultList = pStreamAccess.getReference().getReference().getElements();
		// Iterator variable for replacing items in the result list
		int i = 0;
				
		for(StreamElement element : elementList){
			if(element instanceof StructureElements){
				// Cast to the structure element
				StructureElements str = (StructureElements)element;
				// Get the list structure elements;
				resultList.addAll(i, str.getElement().getElements());
			}else{
				// Add the standard element to the result list
				resultList.add(element);
			}
			// Iterate through the set
			i++;
		}
		return Scopes.scopeFor(resultList);
	}
}
